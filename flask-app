from flask import Flask, render_template, request, jsonify
import torch
import torchvision.transforms as transforms
from PIL import Image

app = Flask(__name__)

# Load the trained model weights
model = torch.load('trained_model_weights.pth')

# Set the model to evaluation mode
model.eval()

# Define the image transformations
image_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Get the image file from the request
    file = request.files['image']

    # Open the image file and apply the transformations
    image = Image.open(file)
    image = image_transforms(image)

    # Add an extra dimension to the image tensor to represent the batch size of 1
    image = image.unsqueeze(0)

    # Pass the image tensor through the model
    output = model(image)

    # Apply a sigmoid activation function to the output tensor
    prob = torch.sigmoid(output).item()

    # Return a JSON response with the probability score
    return jsonify({'probability': prob})

if __name__ == '__main__':
    app.run(debug=True)
