import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torch.utils.data import DataLoader, Dataset
from torchvision.transforms import ToTensor
import monai 


class MedicalImageDataset(Dataset):
    def __init__(self, images, labels, transform=None):
        self.images = images
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        image = self.images[idx]
        label = self.labels[idx]
        if self.transform:
            image = self.transform(image)
        return image, label

class MedicalImageClassifier(nn.Module):
    def __init__(self):
        super(MedicalImageClassifier, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.fc1 = nn.Linear(32 * 7 * 7, 64)
        self.fc2 = nn.Linear(64, 1)

    def forward(self, x):
        x = self.pool(nn.functional.relu(self.conv1(x)))
        x = self.pool(nn.functional.relu(self.conv2(x)))
        x = x.view(-1, 32 * 7 * 7)
        x = nn.functional.relu(self.fc1(x))
        x = nn.functional.sigmoid(self.fc2(x))
        return x

def train_model(model, train_loader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0
    for i, (inputs, labels) in enumerate(train_loader, 0):
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels.float().unsqueeze(1))
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    return running_loss / len(train_loader)

def test_model(model, test_loader, criterion, device):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            predicted = torch.round(outputs)
            total += labels.size(0)
            correct += (predicted == labels.float().unsqueeze(1)).sum().item()
    return correct / total

# Load data
train_data = torchvision.datasets.ImageFolder('path/to/train/data', transform=ToTensor())
train_loader = DataLoader(train_data, batch_size=32, shuffle=True, num_workers=2)
test_data = torchvision.datasets.ImageFolder('path/to/test/data', transform=ToTensor())
test_loader = DataLoader(test_data, batch_size=32, shuffle=True, num_workers=2)

# Initialize model
model = MedicalImageClassifier()

# Train model
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters())
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model.to(device)
for epoch in range(10):
    train_loss = train_model(model, train_loader, criterion, optimizer, device)
    test_acc = test_model(model, test_loader, criterion, device)
    print ('Epoch {}, train loss: {:.4f}, test accuracy: {:.4f}'.format(epoch+1, train_loss, test_acc))
